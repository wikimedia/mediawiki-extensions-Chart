// @ts-ignore
const echarts = require( '../../lib/echarts/echarts.common.js' );

const adjustTitleWidth = ( chart ) => {
	const option = chart.getOption();
	if ( option.title && option.title[ 0 ].textStyle ) {
		option.title[ 0 ].textStyle.width = chart.getWidth();
		chart.setOption( option );
	}
};

/**
 * Creates a number formatter.
 * Uses basic formatting for the 'none' format option.
 * (no thousands separator, no compact notation)
 *
 * @param {string} language
 * @param {string} formatMode
 * @return {Function}
 */
const numberFormatter = ( language, formatMode ) => ( value ) => {
	let formatter;
	if ( formatMode === 'none' ) {
		formatter = new Intl.NumberFormat( language, {
			useGrouping: false,
			maximumFractionDigits: 20
		} );
	} else {
		const isFraction = value < 0;
		const decimals = value < 100 ? 2 : 0;
		formatter = new Intl.NumberFormat( language, {
			style: 'decimal',
			notation: value >= 1000 ? 'compact' : 'standard',
			compactDisplay: 'short',
			minimumFractionDigits: 0,
			maximumFractionDigits: isFraction ? 3 : decimals
		} );
	}
	return formatter.format( value );
};

/**
 * @typedef {'float'|'integer'|'date'|'string'|string} ChartAxisType
 */

/**
 * Infers the correct formatter based on the data series.
 *
 * @param {string} type
 * @param {string} formatMode
 * @param {string} language
 * @return {Function}
 */
const getFormatterForType = ( type, formatMode, language ) => {
	const dateFormatter = new Intl.DateTimeFormat( language );
	const formatAsDate = ( /** @type {string} */ value ) => dateFormatter.format( new Date( value ) );
	const formatAsString = ( /** @type {string} */ value ) => value;

	switch ( type ) {
		case 'number':
		case 'integer':
		case 'float':
			return numberFormatter( language, formatMode );
		case 'date':
			return formatAsDate;
		default:
			return formatAsString;
	}
};

/**
 * Adds tooltip functionality to chart.
 *
 * @param {Object} spec
 * @param {Function} xFormatter
 * @param {Function} yFormatter
 */
const addTooltip = ( spec, xFormatter, yFormatter ) => {
	Object.assign( spec, {
		tooltip: {
			axisPointer: {
				label: {
					formatter: ( axis ) => xFormatter( axis.value )
				}
			},
			valueFormatter: yFormatter,
			trigger: 'axis'
		}
	} );
};

/**
 * @param {HTMLElement} wikiChartElement
 * @param {Object} chartData
 */
const render = ( wikiChartElement, chartData ) => {
	// WARNING: Be careful when changing this code to handle new or changed fields in chartData
	// generated by the chart-renderer service. This code will encounter cached pages with the old
	// version of this interface for a few weeks after deployment, so it must be backwards
	// compatible (handle both the old and the new version of this interface correctly).
	// For example, when a new field is added, this code should check whether that new field is
	// present before using it.
	const {
		spec,
		theme,
		xAxisType,
		xAxisFormatMode = 'none',
		yAxisType,
		yAxisFormatMode = 'none'
	} = chartData;

	const language = mw.config.get( 'wgUserLanguage' );
	const locale = Intl.Locale ? new Intl.Locale( language ) : null;
	// Note: Only available in modern browsers, older browsers will fall back to LTR.
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo
	const isRTL =
    locale && locale.textInfo && locale.textInfo.direction === 'rtl';

	const height = wikiChartElement.clientHeight;
	const originalSVG = wikiChartElement.querySelector( 'svg' );
	const chart = echarts.init( wikiChartElement, theme, {
		renderer: 'svg',
		height
	} );

	if ( spec.title && spec.title.textStyle ) {
		spec.title.textStyle.width = chart.getWidth();
	}

	const xFormatter = getFormatterForType( xAxisType, xAxisFormatMode, language );
	const yFormatter = getFormatterForType( yAxisType, yAxisFormatMode, language );

	addTooltip( spec, xFormatter, yFormatter );

	if ( spec.xAxis ) {
		spec.xAxis.axisLabel = {
			formatter: xFormatter
		};
	}

	if ( spec.yAxis ) {
		spec.yAxis.axisLabel = {
			formatter: yFormatter
		};
	}

	if ( spec.legend ) {
		Object.assign( spec.legend, {
			[ isRTL ? 'right' : 'left' ]: 0,
			type: 'scroll',
			align: isRTL ? 'right' : 'left'
		} );
	}

	chart.setOption( spec );
	originalSVG.parentNode.removeChild( originalSVG );
	window.addEventListener( 'resize', () => {
		chart.resize();
		adjustTitleWidth( chart );
	} );
};

module.exports = {
	numberFormatter,
	getFormatterForType,
	render
};
